var _user$project$Store$encodeModel = function (model) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'value',
				_1: _elm_lang$core$Json_Encode$int(model.value)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'inputString',
					_1: _elm_lang$core$Json_Encode$string(model.inputString)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Store$nextState = _elm_lang$core$Native_Platform.outgoingPort(
	'nextState',
	function (v) {
		return v;
	});
var _user$project$Store$init = {
	ctor: '_Tuple2',
	_0: {value: 0, inputString: ''},
	_1: _user$project$Store$nextState(
		_user$project$Store$encodeModel(
			{value: 0, inputString: ''}))
};
var _user$project$Store$send = function (_p0) {
	return _user$project$Store$nextState(
		_user$project$Store$encodeModel(_p0));
};
var _user$project$Store$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'NoOp':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'Increment':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{value: model.value + 1});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Store$send(newModel)
				};
			case 'Decrement':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						value: A2(_elm_lang$core$Basics$max, 0, model.value - 1)
					});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Store$send(newModel)
				};
			default:
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						inputString: _elm_lang$core$String$toUpper(_p1._0)
					});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Store$send(newModel)
				};
		}
	});
var _user$project$Store$increment = _elm_lang$core$Native_Platform.incomingPort(
	'increment',
	_elm_lang$core$Json_Decode$null(
		{ctor: '_Tuple0'}));
var _user$project$Store$decrement = _elm_lang$core$Native_Platform.incomingPort(
	'decrement',
	_elm_lang$core$Json_Decode$null(
		{ctor: '_Tuple0'}));
var _user$project$Store$setString = _elm_lang$core$Native_Platform.incomingPort('setString', _elm_lang$core$Json_Decode$string);
var _user$project$Store$Model = F2(
	function (a, b) {
		return {value: a, inputString: b};
	});
var _user$project$Store$SetString = function (a) {
	return {ctor: 'SetString', _0: a};
};
var _user$project$Store$Decrement = {ctor: 'Decrement'};
var _user$project$Store$Increment = {ctor: 'Increment'};
var _user$project$Store$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Store$increment(
				_elm_lang$core$Basics$always(_user$project$Store$Increment)),
			_1: {
				ctor: '::',
				_0: _user$project$Store$decrement(
					_elm_lang$core$Basics$always(_user$project$Store$Decrement)),
				_1: {
					ctor: '::',
					_0: _user$project$Store$setString(_user$project$Store$SetString),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Store$main = _elm_lang$core$Platform$program(
	{init: _user$project$Store$init, update: _user$project$Store$update, subscriptions: _user$project$Store$subscriptions})();
var _user$project$Store$NoOp = {ctor: 'NoOp'};
